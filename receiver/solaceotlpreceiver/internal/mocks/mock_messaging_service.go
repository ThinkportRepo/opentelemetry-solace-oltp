// Code generated by MockGen. DO NOT EDIT.
// Source: receiver/solaceotlpreceiver/internal/mocks/messaging_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessagingService is a mock of MessagingService interface.
type MockMessagingService struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceMockRecorder
}

// MockMessagingServiceMockRecorder is the mock recorder for MockMessagingService.
type MockMessagingServiceMockRecorder struct {
	mock *MockMessagingService
}

// NewMockMessagingService creates a new mock instance.
func NewMockMessagingService(ctrl *gomock.Controller) *MockMessagingService {
	mock := &MockMessagingService{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagingService) EXPECT() *MockMessagingServiceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMessagingService) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMessagingServiceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMessagingService)(nil).Connect))
}

// CreateQueueConsumerBuilder mocks base method.
func (m *MockMessagingService) CreateQueueConsumerBuilder() QueueConsumerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueConsumerBuilder")
	ret0, _ := ret[0].(QueueConsumerBuilder)
	return ret0
}

// CreateQueueConsumerBuilder indicates an expected call of CreateQueueConsumerBuilder.
func (mr *MockMessagingServiceMockRecorder) CreateQueueConsumerBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueConsumerBuilder", reflect.TypeOf((*MockMessagingService)(nil).CreateQueueConsumerBuilder))
}

// Disconnect mocks base method.
func (m *MockMessagingService) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMessagingServiceMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMessagingService)(nil).Disconnect))
}
