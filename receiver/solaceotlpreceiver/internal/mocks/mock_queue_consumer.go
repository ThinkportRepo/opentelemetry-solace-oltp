// Code generated by MockGen. DO NOT EDIT.
// Source: receiver/solaceotlpreceiver/internal/mocks/queue_consumer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueueConsumer is a mock of QueueConsumer interface.
type MockQueueConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueConsumerMockRecorder
}

// MockQueueConsumerMockRecorder is the mock recorder for MockQueueConsumer.
type MockQueueConsumerMockRecorder struct {
	mock *MockQueueConsumer
}

// NewMockQueueConsumer creates a new mock instance.
func NewMockQueueConsumer(ctrl *gomock.Controller) *MockQueueConsumer {
	mock := &MockQueueConsumer{ctrl: ctrl}
	mock.recorder = &MockQueueConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueConsumer) EXPECT() *MockQueueConsumerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockQueueConsumer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockQueueConsumerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQueueConsumer)(nil).Start))
}

// Terminate mocks base method.
func (m *MockQueueConsumer) Terminate(timeout uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockQueueConsumerMockRecorder) Terminate(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockQueueConsumer)(nil).Terminate), timeout)
}
