// Code generated by MockGen. DO NOT EDIT.
// Source: receiver/solaceotlpreceiver/internal/interfaces/inbound_message.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	message "solace.dev/go/messaging/pkg/solace/message"
	rgmid "solace.dev/go/messaging/pkg/solace/message/rgmid"
	sdt "solace.dev/go/messaging/pkg/solace/message/sdt"
)

// MockInboundMessage is a mock of InboundMessage interface.
type MockInboundMessage struct {
	ctrl     *gomock.Controller
	recorder *MockInboundMessageMockRecorder
}

// MockInboundMessageMockRecorder is the mock recorder for MockInboundMessage.
type MockInboundMessageMockRecorder struct {
	mock *MockInboundMessage
}

// NewMockInboundMessage creates a new mock instance.
func NewMockInboundMessage(ctrl *gomock.Controller) *MockInboundMessage {
	mock := &MockInboundMessage{ctrl: ctrl}
	mock.recorder = &MockInboundMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInboundMessage) EXPECT() *MockInboundMessageMockRecorder {
	return m.recorder
}

// Dispose mocks base method.
func (m *MockInboundMessage) Dispose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispose")
}

// Dispose indicates an expected call of Dispose.
func (mr *MockInboundMessageMockRecorder) Dispose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockInboundMessage)(nil).Dispose))
}

// GetApplicationMessageID mocks base method.
func (m *MockInboundMessage) GetApplicationMessageID() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationMessageID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetApplicationMessageID indicates an expected call of GetApplicationMessageID.
func (mr *MockInboundMessageMockRecorder) GetApplicationMessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationMessageID", reflect.TypeOf((*MockInboundMessage)(nil).GetApplicationMessageID))
}

// GetApplicationMessageType mocks base method.
func (m *MockInboundMessage) GetApplicationMessageType() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationMessageType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetApplicationMessageType indicates an expected call of GetApplicationMessageType.
func (mr *MockInboundMessageMockRecorder) GetApplicationMessageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationMessageType", reflect.TypeOf((*MockInboundMessage)(nil).GetApplicationMessageType))
}

// GetClassOfService mocks base method.
func (m *MockInboundMessage) GetClassOfService() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassOfService")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetClassOfService indicates an expected call of GetClassOfService.
func (mr *MockInboundMessageMockRecorder) GetClassOfService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassOfService", reflect.TypeOf((*MockInboundMessage)(nil).GetClassOfService))
}

// GetCorrelationID mocks base method.
func (m *MockInboundMessage) GetCorrelationID() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorrelationID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCorrelationID indicates an expected call of GetCorrelationID.
func (mr *MockInboundMessageMockRecorder) GetCorrelationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorrelationID", reflect.TypeOf((*MockInboundMessage)(nil).GetCorrelationID))
}

// GetDestination mocks base method.
func (m *MockInboundMessage) GetDestination() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestination")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDestination indicates an expected call of GetDestination.
func (mr *MockInboundMessageMockRecorder) GetDestination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestination", reflect.TypeOf((*MockInboundMessage)(nil).GetDestination))
}

// GetDestinationName mocks base method.
func (m *MockInboundMessage) GetDestinationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDestinationName indicates an expected call of GetDestinationName.
func (mr *MockInboundMessageMockRecorder) GetDestinationName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationName", reflect.TypeOf((*MockInboundMessage)(nil).GetDestinationName))
}

// GetExpiration mocks base method.
func (m *MockInboundMessage) GetExpiration() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiration")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetExpiration indicates an expected call of GetExpiration.
func (mr *MockInboundMessageMockRecorder) GetExpiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiration", reflect.TypeOf((*MockInboundMessage)(nil).GetExpiration))
}

// GetHTTPContentEncoding mocks base method.
func (m *MockInboundMessage) GetHTTPContentEncoding() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPContentEncoding")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHTTPContentEncoding indicates an expected call of GetHTTPContentEncoding.
func (mr *MockInboundMessageMockRecorder) GetHTTPContentEncoding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPContentEncoding", reflect.TypeOf((*MockInboundMessage)(nil).GetHTTPContentEncoding))
}

// GetHTTPContentType mocks base method.
func (m *MockInboundMessage) GetHTTPContentType() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPContentType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHTTPContentType indicates an expected call of GetHTTPContentType.
func (mr *MockInboundMessageMockRecorder) GetHTTPContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPContentType", reflect.TypeOf((*MockInboundMessage)(nil).GetHTTPContentType))
}

// GetMessageDiscardNotification mocks base method.
func (m *MockInboundMessage) GetMessageDiscardNotification() message.MessageDiscardNotification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageDiscardNotification")
	ret0, _ := ret[0].(message.MessageDiscardNotification)
	return ret0
}

// GetMessageDiscardNotification indicates an expected call of GetMessageDiscardNotification.
func (mr *MockInboundMessageMockRecorder) GetMessageDiscardNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageDiscardNotification", reflect.TypeOf((*MockInboundMessage)(nil).GetMessageDiscardNotification))
}

// GetPayloadAsBytes mocks base method.
func (m *MockInboundMessage) GetPayloadAsBytes() ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadAsBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPayloadAsBytes indicates an expected call of GetPayloadAsBytes.
func (mr *MockInboundMessageMockRecorder) GetPayloadAsBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadAsBytes", reflect.TypeOf((*MockInboundMessage)(nil).GetPayloadAsBytes))
}

// GetPayloadAsMap mocks base method.
func (m *MockInboundMessage) GetPayloadAsMap() (sdt.Map, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadAsMap")
	ret0, _ := ret[0].(sdt.Map)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPayloadAsMap indicates an expected call of GetPayloadAsMap.
func (mr *MockInboundMessageMockRecorder) GetPayloadAsMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadAsMap", reflect.TypeOf((*MockInboundMessage)(nil).GetPayloadAsMap))
}

// GetPayloadAsStream mocks base method.
func (m *MockInboundMessage) GetPayloadAsStream() (sdt.Stream, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadAsStream")
	ret0, _ := ret[0].(sdt.Stream)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPayloadAsStream indicates an expected call of GetPayloadAsStream.
func (mr *MockInboundMessageMockRecorder) GetPayloadAsStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadAsStream", reflect.TypeOf((*MockInboundMessage)(nil).GetPayloadAsStream))
}

// GetPayloadAsString mocks base method.
func (m *MockInboundMessage) GetPayloadAsString() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadAsString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPayloadAsString indicates an expected call of GetPayloadAsString.
func (mr *MockInboundMessageMockRecorder) GetPayloadAsString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadAsString", reflect.TypeOf((*MockInboundMessage)(nil).GetPayloadAsString))
}

// GetPriority mocks base method.
func (m *MockInboundMessage) GetPriority() (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriority")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPriority indicates an expected call of GetPriority.
func (mr *MockInboundMessageMockRecorder) GetPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriority", reflect.TypeOf((*MockInboundMessage)(nil).GetPriority))
}

// GetProperties mocks base method.
func (m *MockInboundMessage) GetProperties() sdt.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties")
	ret0, _ := ret[0].(sdt.Map)
	return ret0
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockInboundMessageMockRecorder) GetProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockInboundMessage)(nil).GetProperties))
}

// GetProperty mocks base method.
func (m *MockInboundMessage) GetProperty(key string) (sdt.Data, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperty", key)
	ret0, _ := ret[0].(sdt.Data)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetProperty indicates an expected call of GetProperty.
func (mr *MockInboundMessageMockRecorder) GetProperty(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperty", reflect.TypeOf((*MockInboundMessage)(nil).GetProperty), key)
}

// GetRedelivered mocks base method.
func (m *MockInboundMessage) GetRedelivered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedelivered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetRedelivered indicates an expected call of GetRedelivered.
func (mr *MockInboundMessageMockRecorder) GetRedelivered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedelivered", reflect.TypeOf((*MockInboundMessage)(nil).GetRedelivered))
}

// GetReplicationGroupMessageID mocks base method.
func (m *MockInboundMessage) GetReplicationGroupMessageID() (rgmid.ReplicationGroupMessageID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationGroupMessageID")
	ret0, _ := ret[0].(rgmid.ReplicationGroupMessageID)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetReplicationGroupMessageID indicates an expected call of GetReplicationGroupMessageID.
func (mr *MockInboundMessageMockRecorder) GetReplicationGroupMessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationGroupMessageID", reflect.TypeOf((*MockInboundMessage)(nil).GetReplicationGroupMessageID))
}

// GetReplyTo mocks base method.
func (m *MockInboundMessage) GetReplyTo() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplyTo")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetReplyTo indicates an expected call of GetReplyTo.
func (mr *MockInboundMessageMockRecorder) GetReplyTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplyTo", reflect.TypeOf((*MockInboundMessage)(nil).GetReplyTo))
}

// GetSenderID mocks base method.
func (m *MockInboundMessage) GetSenderID() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSenderID indicates an expected call of GetSenderID.
func (mr *MockInboundMessageMockRecorder) GetSenderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderID", reflect.TypeOf((*MockInboundMessage)(nil).GetSenderID))
}

// GetSenderTimestamp mocks base method.
func (m *MockInboundMessage) GetSenderTimestamp() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderTimestamp")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSenderTimestamp indicates an expected call of GetSenderTimestamp.
func (mr *MockInboundMessageMockRecorder) GetSenderTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderTimestamp", reflect.TypeOf((*MockInboundMessage)(nil).GetSenderTimestamp))
}

// GetSequenceNumber mocks base method.
func (m *MockInboundMessage) GetSequenceNumber() (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequenceNumber")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSequenceNumber indicates an expected call of GetSequenceNumber.
func (mr *MockInboundMessageMockRecorder) GetSequenceNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequenceNumber", reflect.TypeOf((*MockInboundMessage)(nil).GetSequenceNumber))
}

// GetTimeStamp mocks base method.
func (m *MockInboundMessage) GetTimeStamp() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeStamp")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTimeStamp indicates an expected call of GetTimeStamp.
func (mr *MockInboundMessageMockRecorder) GetTimeStamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeStamp", reflect.TypeOf((*MockInboundMessage)(nil).GetTimeStamp))
}

// GetTimeToLive mocks base method.
func (m *MockInboundMessage) GetTimeToLive() (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeToLive")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTimeToLive indicates an expected call of GetTimeToLive.
func (mr *MockInboundMessageMockRecorder) GetTimeToLive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeToLive", reflect.TypeOf((*MockInboundMessage)(nil).GetTimeToLive))
}

// GetUserPropertyMap mocks base method.
func (m *MockInboundMessage) GetUserPropertyMap() (map[string]interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPropertyMap")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUserPropertyMap indicates an expected call of GetUserPropertyMap.
func (mr *MockInboundMessageMockRecorder) GetUserPropertyMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPropertyMap", reflect.TypeOf((*MockInboundMessage)(nil).GetUserPropertyMap))
}

// HasProperty mocks base method.
func (m *MockInboundMessage) HasProperty(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProperty", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasProperty indicates an expected call of HasProperty.
func (mr *MockInboundMessageMockRecorder) HasProperty(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProperty", reflect.TypeOf((*MockInboundMessage)(nil).HasProperty), name)
}

// IsBinary mocks base method.
func (m *MockInboundMessage) IsBinary() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBinary")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBinary indicates an expected call of IsBinary.
func (mr *MockInboundMessageMockRecorder) IsBinary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBinary", reflect.TypeOf((*MockInboundMessage)(nil).IsBinary))
}

// IsDisposed mocks base method.
func (m *MockInboundMessage) IsDisposed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDisposed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDisposed indicates an expected call of IsDisposed.
func (mr *MockInboundMessageMockRecorder) IsDisposed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDisposed", reflect.TypeOf((*MockInboundMessage)(nil).IsDisposed))
}

// IsRedelivered mocks base method.
func (m *MockInboundMessage) IsRedelivered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRedelivered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRedelivered indicates an expected call of IsRedelivered.
func (mr *MockInboundMessageMockRecorder) IsRedelivered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRedelivered", reflect.TypeOf((*MockInboundMessage)(nil).IsRedelivered))
}

// IsText mocks base method.
func (m *MockInboundMessage) IsText() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsText")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsText indicates an expected call of IsText.
func (mr *MockInboundMessageMockRecorder) IsText() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsText", reflect.TypeOf((*MockInboundMessage)(nil).IsText))
}

// String mocks base method.
func (m *MockInboundMessage) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockInboundMessageMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockInboundMessage)(nil).String))
}
